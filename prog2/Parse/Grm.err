Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "VAR" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #82
  between NxtFunctionDec ::= (*) 
  and     FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #100
  between NxtTypeDec ::= (*) 
  and     TypeDec ::= (*) TYPE ID ASSIGN Ty NxtTypeDec 
  under symbol TYPE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
DIVIDE FUNCTION GE LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT TYPE NIL IN 
OR COMMA PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
Ty ForExp OpExp FieldExpList FieldList 
ArrayExp DecList SubscriptVar VarDec Var 
FieldVar NxtFunctionArgList WhileExp LetExp $START 
Sequence RecordExp NxtFieldList NxtTypeDec NxtSequence 
Exp FunctionDec AssignExp FunctionArgList SeqExp 
CallExp IfExp DecTypeId Dec NxtFieldExpList 
NxtFunctionDec ExpList TypeDec 

===== Productions =====
NxtFieldExpList ::= COMMA ID EQ Exp NxtFieldExpList 
NxtFieldExpList ::= 
FieldExpList ::= ID EQ Exp NxtFieldExpList 
FieldExpList ::= 
NxtFieldList ::= COMMA ID COLON ID NxtFieldList 
NxtFieldList ::= 
FieldList ::= ID COLON ID NxtFieldList 
FieldList ::= 
Ty ::= ARRAY OF ID 
Ty ::= LBRACE FieldList RBRACE 
Ty ::= ID 
DecTypeId ::= COLON ID 
DecTypeId ::= 
NxtTypeDec ::= TypeDec 
NxtTypeDec ::= 
TypeDec ::= TYPE ID ASSIGN Ty NxtTypeDec 
NxtFunctionDec ::= FunctionDec 
NxtFunctionDec ::= 
FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec 
VarDec ::= Var ID DecTypeId ASSIGN Exp 
Dec ::= FunctionDec 
Dec ::= TypeDec 
Dec ::= VarDec 
DecList ::= Dec DecList 
DecList ::= Dec 
SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK 
SubscriptVar ::= FieldVar LBRACK Exp RBRACK 
SubscriptVar ::= ID LBRACK Exp RBRACK 
FieldVar ::= Var DOT ID 
Var ::= SubscriptVar 
Var ::= FieldVar 
Var ::= ID 
NxtSequence ::= Sequence 
NxtSequence ::= Exp 
Sequence ::= Exp SEMICOLON NxtSequence 
ExpList ::= Sequence 
ExpList ::= Exp 
ExpList ::= 
WhileExp ::= WHILE Exp DO Exp 
SeqExp ::= LPAREN ExpList RPAREN 
RecordExp ::= ID LBRACE FieldExpList RBRACE 
OpExp ::= MINUS Exp 
OpExp ::= Exp LE Exp 
OpExp ::= Exp LT Exp 
OpExp ::= Exp GE Exp 
OpExp ::= Exp GT Exp 
OpExp ::= Exp NEQ Exp 
OpExp ::= Exp EQ Exp 
OpExp ::= Exp DIVIDE Exp 
OpExp ::= Exp TIMES Exp 
OpExp ::= Exp MINUS Exp 
OpExp ::= Exp PLUS Exp 
LetExp ::= LET DecList IN ExpList END 
IfExp ::= IF Exp THEN Exp ELSE Exp 
IfExp ::= IF Exp THEN Exp 
IfExp ::= Exp OR Exp 
IfExp ::= Exp AND Exp 
ForExp ::= FOR ID ASSIGN Exp TO Exp DO Exp 
NxtFunctionArgList ::= COMMA Exp NxtFunctionArgList 
NxtFunctionArgList ::= 
FunctionArgList ::= Exp NxtFunctionArgList 
FunctionArgList ::= 
CallExp ::= ID LPAREN FunctionArgList RPAREN 
AssignExp ::= Var ASSIGN Exp 
ArrayExp ::= ID LBRACK Exp RBRACK OF Exp 
Exp ::= WhileExp 
Exp ::= SeqExp 
Exp ::= RecordExp 
Exp ::= OpExp 
Exp ::= LetExp 
Exp ::= IfExp 
Exp ::= ForExp 
Exp ::= CallExp 
Exp ::= AssignExp 
Exp ::= ArrayExp 
Exp ::= BREAK 
Exp ::= NIL 
Exp ::= INT 
Exp ::= STRING 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Var ::= (*) ID , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [18]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [1]: {
  [Exp ::= ForExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [2]: {
  [Exp ::= OpExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [3]: {
  [Exp ::= ArrayExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [4]: {
  [SubscriptVar ::= SubscriptVar (*) LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= SubscriptVar (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on LBRACK to state [160]

-------------------
lalr_state [5]: {
  [Exp ::= INT (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [6]: {
  [Exp ::= Var (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= Var (*) ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= Var (*) DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on ASSIGN to state [158]
transition on DOT to state [68]

-------------------
lalr_state [7]: {
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) RecordExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ForExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Var ::= (*) FieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) SeqExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [LetExp ::= (*) LET DecList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) IfExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Var ::= (*) SubscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [WhileExp ::= WHILE (*) Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) WhileExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ArrayExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) LetExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) AssignExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) OpExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [AssignExp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) CallExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [155]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [8]: {
  [Var ::= FieldVar (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= FieldVar (*) LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on LBRACK to state [152]

-------------------
lalr_state [9]: {
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) RecordExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [OpExp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= IF (*) Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) ForExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Var ::= (*) FieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) SeqExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [OpExp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [LetExp ::= (*) LET DecList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) IfExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Var ::= (*) SubscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) WhileExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) ArrayExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) LetExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [OpExp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) AssignExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) OpExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [IfExp ::= IF (*) Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [AssignExp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) CallExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [147]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [10]: {
  [Exp ::= LetExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [11]: {
  [Exp ::= WhileExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [12]: {
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [ExpList ::= (*) Sequence , {RPAREN }]
  [OpExp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= LPAREN (*) ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Sequence ::= (*) Exp SEMICOLON NxtSequence , {RPAREN }]
  [OpExp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [ExpList ::= (*) , {RPAREN }]
  [OpExp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [ExpList ::= (*) Exp , {RPAREN }]
  [OpExp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on ExpList to state [145]
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [111]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on Sequence to state [110]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [13]: {
  [Exp ::= NIL (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [14]: {
  [SubscriptVar ::= ID (*) LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= ID (*) LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= ID (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= ID (*) LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= ID (*) LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on LPAREN to state [122]
transition on LBRACK to state [121]
transition on LBRACE to state [120]

-------------------
lalr_state [15]: {
  [Exp ::= RecordExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [16]: {
  [Exp ::= STRING (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [17]: {
  [Exp ::= BREAK (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [18]: {
  [OpExp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on EOF to state [119]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [19]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= MINUS (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [118]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [20]: {
  [Exp ::= AssignExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [21]: {
  [Exp ::= error (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [22]: {
  [TypeDec ::= (*) TYPE ID ASSIGN Ty NxtTypeDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [DecList ::= (*) Dec , {IN }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [Var ::= (*) FieldVar , {ID DOT }]
  [VarDec ::= (*) Var ID DecTypeId ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) VarDec , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT }]
  [Var ::= (*) ID , {ID DOT }]
  [Dec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [DecList ::= (*) Dec DecList , {IN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [LetExp ::= LET (*) DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT }]
}
transition on Var to state [66]
transition on TypeDec to state [65]
transition on FieldVar to state [8]
transition on FUNCTION to state [64]
transition on ID to state [63]
transition on VarDec to state [62]
transition on TYPE to state [61]
transition on FunctionDec to state [60]
transition on Dec to state [59]
transition on SubscriptVar to state [4]
transition on DecList to state [58]

-------------------
lalr_state [23]: {
  [Exp ::= SeqExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [24]: {
  [Exp ::= CallExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [25]: {
  [Exp ::= IfExp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [26]: {
  [ForExp ::= FOR (*) ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on ID to state [27]

-------------------
lalr_state [27]: {
  [ForExp ::= FOR ID (*) ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on ASSIGN to state [28]

-------------------
lalr_state [28]: {
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) RecordExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [OpExp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) ForExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Var ::= (*) FieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [ForExp ::= FOR ID ASSIGN (*) Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) SeqExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [OpExp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [LetExp ::= (*) LET DecList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) IfExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Var ::= (*) SubscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [IfExp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) WhileExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) ArrayExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) LetExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [OpExp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [IfExp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) AssignExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) OpExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [OpExp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [IfExp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [AssignExp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) CallExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [29]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [29]: {
  [OpExp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [IfExp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [ForExp ::= FOR ID ASSIGN Exp (*) TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [OpExp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [IfExp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on TO to state [34]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [30]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp MINUS (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [57]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [31]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp AND (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [56]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [32]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp DIVIDE (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [55]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [33]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp GE (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [54]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [34]: {
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) RecordExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ForExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [ForExp ::= FOR ID ASSIGN Exp TO (*) Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) SeqExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [LetExp ::= (*) LET DecList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) IfExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Var ::= (*) SubscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) WhileExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ArrayExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) LetExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) AssignExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) OpExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [OpExp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [AssignExp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) CallExp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [51]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [35]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp NEQ (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [50]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [36]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp PLUS (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [49]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [37]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp EQ (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [48]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [38]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp LE (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [47]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [39]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp GT (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [46]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [40]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp TIMES (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [45]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [41]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp LT (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [44]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [42]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp OR (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [43]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [43]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp OR Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [44]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp LT Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [45]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp TIMES Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [46]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp GT Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [47]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp LE Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [48]: {
  [OpExp ::= Exp EQ Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [49]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp PLUS Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [50]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp NEQ Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [51]: {
  [OpExp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [ForExp ::= FOR ID ASSIGN Exp TO Exp (*) DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on OR to state [42]
transition on DO to state [52]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [52]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= FOR ID ASSIGN Exp TO Exp DO (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [53]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [53]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= FOR ID ASSIGN Exp TO Exp DO Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [54]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp GE Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [55]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp DIVIDE Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [56]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp AND Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [57]: {
  [OpExp ::= Exp MINUS Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [58]: {
  [LetExp ::= LET DecList (*) IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on IN to state [109]

-------------------
lalr_state [59]: {
  [TypeDec ::= (*) TYPE ID ASSIGN Ty NxtTypeDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
  [DecList ::= Dec (*) , {IN }]
  [Dec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [DecList ::= (*) Dec , {IN }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [Var ::= (*) FieldVar , {ID DOT }]
  [VarDec ::= (*) Var ID DecTypeId ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) VarDec , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT }]
  [Var ::= (*) ID , {ID DOT }]
  [DecList ::= Dec (*) DecList , {IN }]
  [Dec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [DecList ::= (*) Dec DecList , {IN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [Var ::= (*) SubscriptVar , {ID DOT }]
}
transition on Var to state [66]
transition on TypeDec to state [65]
transition on FieldVar to state [8]
transition on FUNCTION to state [64]
transition on ID to state [63]
transition on VarDec to state [62]
transition on TYPE to state [61]
transition on FunctionDec to state [60]
transition on Dec to state [59]
transition on SubscriptVar to state [4]
transition on DecList to state [108]

-------------------
lalr_state [60]: {
  [Dec ::= FunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [61]: {
  [TypeDec ::= TYPE (*) ID ASSIGN Ty NxtTypeDec , {ID IN FUNCTION TYPE }]
}
transition on ID to state [96]

-------------------
lalr_state [62]: {
  [Dec ::= VarDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [63]: {
  [SubscriptVar ::= ID (*) LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [Var ::= ID (*) , {ID DOT }]
}
transition on LBRACK to state [93]

-------------------
lalr_state [64]: {
  [FunctionDec ::= FUNCTION (*) ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on ID to state [75]

-------------------
lalr_state [65]: {
  [Dec ::= TypeDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [66]: {
  [VarDec ::= Var (*) ID DecTypeId ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [FieldVar ::= Var (*) DOT ID , {ID LBRACK DOT }]
}
transition on DOT to state [68]
transition on ID to state [67]

-------------------
lalr_state [67]: {
  [VarDec ::= Var ID (*) DecTypeId ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [DecTypeId ::= (*) COLON ID , {ASSIGN }]
  [DecTypeId ::= (*) , {ASSIGN }]
}
transition on COLON to state [71]
transition on DecTypeId to state [70]

-------------------
lalr_state [68]: {
  [FieldVar ::= Var DOT (*) ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on ID to state [69]

-------------------
lalr_state [69]: {
  [FieldVar ::= Var DOT ID (*) , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [70]: {
  [VarDec ::= Var ID DecTypeId (*) ASSIGN Exp , {ID IN FUNCTION TYPE }]
}
transition on ASSIGN to state [73]

-------------------
lalr_state [71]: {
  [DecTypeId ::= COLON (*) ID , {EQ ASSIGN }]
}
transition on ID to state [72]

-------------------
lalr_state [72]: {
  [DecTypeId ::= COLON ID (*) , {EQ ASSIGN }]
}

-------------------
lalr_state [73]: {
  [Var ::= (*) ID , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) NIL , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) error , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) Var , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [VarDec ::= Var ID DecTypeId ASSIGN (*) Exp , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) STRING , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) INT , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [74]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [74]: {
  [OpExp ::= Exp (*) GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [VarDec ::= Var ID DecTypeId ASSIGN Exp (*) , {ID IN FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [75]: {
  [FunctionDec ::= FUNCTION ID (*) LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on LPAREN to state [76]

-------------------
lalr_state [76]: {
  [FieldList ::= (*) , {RPAREN }]
  [FieldList ::= (*) ID COLON ID NxtFieldList , {RPAREN }]
  [FunctionDec ::= FUNCTION ID LPAREN (*) FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on FieldList to state [78]
transition on ID to state [77]

-------------------
lalr_state [77]: {
  [FieldList ::= ID (*) COLON ID NxtFieldList , {RPAREN RBRACE }]
}
transition on COLON to state [85]

-------------------
lalr_state [78]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList (*) RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on RPAREN to state [79]

-------------------
lalr_state [79]: {
  [DecTypeId ::= (*) COLON ID , {EQ }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN (*) DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
  [DecTypeId ::= (*) , {EQ }]
}
transition on COLON to state [71]
transition on DecTypeId to state [80]

-------------------
lalr_state [80]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN DecTypeId (*) EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on EQ to state [81]

-------------------
lalr_state [81]: {
  [Var ::= (*) ID , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) NIL , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) error , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) Var , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) STRING , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ (*) Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) INT , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [82]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [82]: {
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec , {ID IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) GE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [NxtFunctionDec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [NxtFunctionDec ::= (*) , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp (*) NxtFunctionDec , {ID IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {ID PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on NxtFunctionDec to state [84]
transition on FUNCTION to state [64]
transition on TIMES to state [40]
transition on GT to state [39]
transition on FunctionDec to state [83]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [83]: {
  [NxtFunctionDec ::= FunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [84]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [85]: {
  [FieldList ::= ID COLON (*) ID NxtFieldList , {RPAREN RBRACE }]
}
transition on ID to state [86]

-------------------
lalr_state [86]: {
  [NxtFieldList ::= (*) , {RPAREN RBRACE }]
  [FieldList ::= ID COLON ID (*) NxtFieldList , {RPAREN RBRACE }]
  [NxtFieldList ::= (*) COMMA ID COLON ID NxtFieldList , {RPAREN RBRACE }]
}
transition on NxtFieldList to state [88]
transition on COMMA to state [87]

-------------------
lalr_state [87]: {
  [NxtFieldList ::= COMMA (*) ID COLON ID NxtFieldList , {RPAREN RBRACE }]
}
transition on ID to state [89]

-------------------
lalr_state [88]: {
  [FieldList ::= ID COLON ID NxtFieldList (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [89]: {
  [NxtFieldList ::= COMMA ID (*) COLON ID NxtFieldList , {RPAREN RBRACE }]
}
transition on COLON to state [90]

-------------------
lalr_state [90]: {
  [NxtFieldList ::= COMMA ID COLON (*) ID NxtFieldList , {RPAREN RBRACE }]
}
transition on ID to state [91]

-------------------
lalr_state [91]: {
  [NxtFieldList ::= (*) , {RPAREN RBRACE }]
  [NxtFieldList ::= COMMA ID COLON ID (*) NxtFieldList , {RPAREN RBRACE }]
  [NxtFieldList ::= (*) COMMA ID COLON ID NxtFieldList , {RPAREN RBRACE }]
}
transition on NxtFieldList to state [92]
transition on COMMA to state [87]

-------------------
lalr_state [92]: {
  [NxtFieldList ::= COMMA ID COLON ID NxtFieldList (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [93]: {
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= ID LBRACK (*) Exp RBRACK , {ID LBRACK DOT }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [94]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [94]: {
  [SubscriptVar ::= ID LBRACK Exp (*) RBRACK , {ID LBRACK DOT }]
  [OpExp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on RBRACK to state [95]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [95]: {
  [SubscriptVar ::= ID LBRACK Exp RBRACK (*) , {ID LBRACK DOT }]
}

-------------------
lalr_state [96]: {
  [TypeDec ::= TYPE ID (*) ASSIGN Ty NxtTypeDec , {ID IN FUNCTION TYPE }]
}
transition on ASSIGN to state [97]

-------------------
lalr_state [97]: {
  [Ty ::= (*) ID , {ID IN FUNCTION TYPE }]
  [Ty ::= (*) ARRAY OF ID , {ID IN FUNCTION TYPE }]
  [TypeDec ::= TYPE ID ASSIGN (*) Ty NxtTypeDec , {ID IN FUNCTION TYPE }]
  [Ty ::= (*) LBRACE FieldList RBRACE , {ID IN FUNCTION TYPE }]
}
transition on ARRAY to state [101]
transition on Ty to state [100]
transition on LBRACE to state [99]
transition on ID to state [98]

-------------------
lalr_state [98]: {
  [Ty ::= ID (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [99]: {
  [FieldList ::= (*) , {RBRACE }]
  [FieldList ::= (*) ID COLON ID NxtFieldList , {RBRACE }]
  [Ty ::= LBRACE (*) FieldList RBRACE , {ID IN FUNCTION TYPE }]
}
transition on FieldList to state [106]
transition on ID to state [77]

-------------------
lalr_state [100]: {
  [NxtTypeDec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [NxtTypeDec ::= (*) , {ID IN FUNCTION TYPE }]
  [TypeDec ::= TYPE ID ASSIGN Ty (*) NxtTypeDec , {ID IN FUNCTION TYPE }]
  [TypeDec ::= (*) TYPE ID ASSIGN Ty NxtTypeDec , {ID IN FUNCTION TYPE }]
}
transition on TypeDec to state [105]
transition on TYPE to state [61]
transition on NxtTypeDec to state [104]

-------------------
lalr_state [101]: {
  [Ty ::= ARRAY (*) OF ID , {ID IN FUNCTION TYPE }]
}
transition on OF to state [102]

-------------------
lalr_state [102]: {
  [Ty ::= ARRAY OF (*) ID , {ID IN FUNCTION TYPE }]
}
transition on ID to state [103]

-------------------
lalr_state [103]: {
  [Ty ::= ARRAY OF ID (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [104]: {
  [TypeDec ::= TYPE ID ASSIGN Ty NxtTypeDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [105]: {
  [NxtTypeDec ::= TypeDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [106]: {
  [Ty ::= LBRACE FieldList (*) RBRACE , {ID IN FUNCTION TYPE }]
}
transition on RBRACE to state [107]

-------------------
lalr_state [107]: {
  [Ty ::= LBRACE FieldList RBRACE (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [108]: {
  [DecList ::= Dec DecList (*) , {IN }]
}

-------------------
lalr_state [109]: {
  [Var ::= (*) ID , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp TIMES Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) RecordExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) NIL , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [ExpList ::= (*) Sequence , {END }]
  [OpExp ::= (*) Exp GE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) ForExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) error , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Var ::= (*) FieldVar , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp DIVIDE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) SeqExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) BREAK , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [LetExp ::= LET DecList IN (*) ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Sequence ::= (*) Exp SEMICOLON NxtSequence , {END }]
  [OpExp ::= (*) Exp LT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [LetExp ::= (*) LET DecList IN ExpList END , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) IfExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Var , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Var ::= (*) SubscriptVar , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp EQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) Exp AND Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) WhileExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) ArrayExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp LE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp PLUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) LetExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) STRING , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [FieldVar ::= (*) Var DOT ID , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [ExpList ::= (*) , {END }]
  [OpExp ::= (*) Exp NEQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) Exp OR Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) AssignExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) OpExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) INT , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [ExpList ::= (*) Exp , {END }]
  [OpExp ::= (*) Exp GT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) IF Exp THEN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [AssignExp ::= (*) Var ASSIGN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) CallExp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on ExpList to state [112]
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [111]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on Sequence to state [110]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [110]: {
  [ExpList ::= Sequence (*) , {RPAREN END }]
}

-------------------
lalr_state [111]: {
  [OpExp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= Exp (*) AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ExpList ::= Exp (*) , {RPAREN END }]
  [OpExp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Sequence ::= Exp (*) SEMICOLON NxtSequence , {RPAREN END }]
  [OpExp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= Exp (*) OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on SEMICOLON to state [114]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [112]: {
  [LetExp ::= LET DecList IN ExpList (*) END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on END to state [113]

-------------------
lalr_state [113]: {
  [LetExp ::= LET DecList IN ExpList END (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [114]: {
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) RecordExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [OpExp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) ForExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Var ::= (*) FieldVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) SeqExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) BREAK , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Sequence ::= Exp SEMICOLON (*) NxtSequence , {RPAREN END }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Sequence ::= (*) Exp SEMICOLON NxtSequence , {RPAREN END }]
  [OpExp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [LetExp ::= (*) LET DecList IN ExpList END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) IfExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Var ::= (*) SubscriptVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) Exp AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) WhileExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) ArrayExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [NxtSequence ::= (*) Exp , {RPAREN END }]
  [OpExp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) LetExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [FieldVar ::= (*) Var DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [OpExp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) Exp OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) AssignExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [NxtSequence ::= (*) Sequence , {RPAREN END }]
  [OpExp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) OpExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [OpExp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [AssignExp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) CallExp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [117]
transition on BREAK to state [17]
transition on NxtSequence to state [116]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on Sequence to state [115]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [115]: {
  [NxtSequence ::= Sequence (*) , {RPAREN END }]
}

-------------------
lalr_state [116]: {
  [Sequence ::= Exp SEMICOLON NxtSequence (*) , {RPAREN END }]
}

-------------------
lalr_state [117]: {
  [OpExp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= Exp (*) AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [NxtSequence ::= Exp (*) , {RPAREN END }]
  [OpExp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Sequence ::= Exp (*) SEMICOLON NxtSequence , {RPAREN END }]
  [OpExp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [OpExp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [IfExp ::= Exp (*) OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on SEMICOLON to state [114]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [118]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= MINUS Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [119]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [120]: {
  [FieldExpList ::= (*) ID EQ Exp NxtFieldExpList , {RBRACE }]
  [FieldExpList ::= (*) , {RBRACE }]
  [RecordExp ::= ID LBRACE (*) FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FieldExpList to state [135]
transition on ID to state [134]

-------------------
lalr_state [121]: {
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [ArrayExp ::= ID LBRACK (*) Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= ID LBRACK (*) Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [130]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [122]: {
  [Var ::= (*) ID , {COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= ID LPAREN (*) FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FunctionArgList ::= (*) , {RPAREN }]
  [Exp ::= (*) IfExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FunctionArgList ::= (*) Exp NxtFunctionArgList , {RPAREN }]
  [Exp ::= (*) LetExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on FunctionArgList to state [124]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [123]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [123]: {
  [OpExp ::= Exp (*) GE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFunctionArgList ::= (*) , {RPAREN }]
  [OpExp ::= Exp (*) LE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FunctionArgList ::= Exp (*) NxtFunctionArgList , {RPAREN }]
  [OpExp ::= Exp (*) LT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFunctionArgList ::= (*) COMMA Exp NxtFunctionArgList , {RPAREN }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on NxtFunctionArgList to state [127]
transition on COMMA to state [126]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [124]: {
  [CallExp ::= ID LPAREN FunctionArgList (*) RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on RPAREN to state [125]

-------------------
lalr_state [125]: {
  [CallExp ::= ID LPAREN FunctionArgList RPAREN (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [126]: {
  [Var ::= (*) ID , {COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFunctionArgList ::= COMMA (*) Exp NxtFunctionArgList , {RPAREN }]
  [Exp ::= (*) RecordExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [128]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [127]: {
  [FunctionArgList ::= Exp NxtFunctionArgList (*) , {RPAREN }]
}

-------------------
lalr_state [128]: {
  [OpExp ::= Exp (*) GE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFunctionArgList ::= (*) , {RPAREN }]
  [OpExp ::= Exp (*) LE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LT Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFunctionArgList ::= COMMA Exp (*) NxtFunctionArgList , {RPAREN }]
  [NxtFunctionArgList ::= (*) COMMA Exp NxtFunctionArgList , {RPAREN }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on NxtFunctionArgList to state [129]
transition on COMMA to state [126]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [129]: {
  [NxtFunctionArgList ::= COMMA Exp NxtFunctionArgList (*) , {RPAREN }]
}

-------------------
lalr_state [130]: {
  [SubscriptVar ::= ID LBRACK Exp (*) RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= ID LBRACK Exp (*) RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on RBRACK to state [131]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [131]: {
  [ArrayExp ::= ID LBRACK Exp RBRACK (*) OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= ID LBRACK Exp RBRACK (*) , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OF to state [132]

-------------------
lalr_state [132]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= ID LBRACK Exp RBRACK OF (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [133]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [133]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= ID LBRACK Exp RBRACK OF Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [134]: {
  [FieldExpList ::= ID (*) EQ Exp NxtFieldExpList , {RBRACE }]
}
transition on EQ to state [137]

-------------------
lalr_state [135]: {
  [RecordExp ::= ID LBRACE FieldExpList (*) RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on RBRACE to state [136]

-------------------
lalr_state [136]: {
  [RecordExp ::= ID LBRACE FieldExpList RBRACE (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [137]: {
  [Var ::= (*) ID , {COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldExpList ::= ID EQ (*) Exp NxtFieldExpList , {RBRACE }]
  [Exp ::= (*) Var , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [138]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [138]: {
  [OpExp ::= Exp (*) GE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFieldExpList ::= (*) , {RBRACE }]
  [OpExp ::= Exp (*) MINUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldExpList ::= ID EQ Exp (*) NxtFieldExpList , {RBRACE }]
  [OpExp ::= Exp (*) LE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFieldExpList ::= (*) COMMA ID EQ Exp NxtFieldExpList , {RBRACE }]
  [OpExp ::= Exp (*) TIMES Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on COMMA to state [140]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on NxtFieldExpList to state [139]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [139]: {
  [FieldExpList ::= ID EQ Exp NxtFieldExpList (*) , {RBRACE }]
}

-------------------
lalr_state [140]: {
  [NxtFieldExpList ::= COMMA (*) ID EQ Exp NxtFieldExpList , {RBRACE }]
}
transition on ID to state [141]

-------------------
lalr_state [141]: {
  [NxtFieldExpList ::= COMMA ID (*) EQ Exp NxtFieldExpList , {RBRACE }]
}
transition on EQ to state [142]

-------------------
lalr_state [142]: {
  [Var ::= (*) ID , {COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFieldExpList ::= COMMA ID EQ (*) Exp NxtFieldExpList , {RBRACE }]
  [Exp ::= (*) OpExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [143]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [143]: {
  [OpExp ::= Exp (*) GE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFieldExpList ::= (*) , {RBRACE }]
  [OpExp ::= Exp (*) MINUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFieldExpList ::= COMMA ID EQ Exp (*) NxtFieldExpList , {RBRACE }]
  [OpExp ::= Exp (*) LT Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [NxtFieldExpList ::= (*) COMMA ID EQ Exp NxtFieldExpList , {RBRACE }]
  [OpExp ::= Exp (*) TIMES Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on COMMA to state [140]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]
transition on NxtFieldExpList to state [144]

-------------------
lalr_state [144]: {
  [NxtFieldExpList ::= COMMA ID EQ Exp NxtFieldExpList (*) , {RBRACE }]
}

-------------------
lalr_state [145]: {
  [SeqExp ::= LPAREN ExpList (*) RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on RPAREN to state [146]

-------------------
lalr_state [146]: {
  [SeqExp ::= LPAREN ExpList RPAREN (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [147]: {
  [OpExp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= IF Exp (*) THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= IF Exp (*) THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [OpExp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [IfExp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on THEN to state [148]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [148]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= IF Exp THEN (*) Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= IF Exp THEN (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [149]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [149]: {
  [IfExp ::= IF Exp THEN Exp (*) ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= IF Exp THEN Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on ELSE to state [150]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [150]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= IF Exp THEN Exp ELSE (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [151]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [151]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= IF Exp THEN Exp ELSE Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [152]: {
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= FieldVar LBRACK (*) Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [153]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [153]: {
  [OpExp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= FieldVar LBRACK Exp (*) RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on RBRACK to state [154]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [154]: {
  [SubscriptVar ::= FieldVar LBRACK Exp RBRACK (*) , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
lalr_state [155]: {
  [OpExp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [OpExp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [IfExp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [WhileExp ::= WHILE Exp (*) DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on DO to state [156]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [156]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= WHILE Exp DO (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [157]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [157]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= WHILE Exp DO Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [158]: {
  [Var ::= (*) ID , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) RecordExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) IfExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) Exp OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) OpExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= (*) Exp GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= Var ASSIGN (*) Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= (*) IF Exp THEN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [Exp ::= (*) CallExp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [159]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [159]: {
  [OpExp ::= Exp (*) GE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) EQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) MINUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) AND Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) DIVIDE Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) PLUS Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [AssignExp ::= Var ASSIGN Exp (*) , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) LT Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) NEQ Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) TIMES Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
  [IfExp ::= Exp (*) OR Exp , {EOF ID COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION TYPE }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [160]: {
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [RecordExp ::= (*) ID LBRACE FieldExpList RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) RecordExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [CallExp ::= (*) ID LPAREN FunctionArgList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ForExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) FieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [SeqExp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ForExp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) SeqExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= SubscriptVar LBRACK (*) Exp RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IfExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WhileExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ArrayExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LetExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) AssignExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) OpExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [OpExp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) CallExp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on FOR to state [26]
transition on IfExp to state [25]
transition on CallExp to state [24]
transition on SeqExp to state [23]
transition on LET to state [22]
transition on error to state [21]
transition on AssignExp to state [20]
transition on MINUS to state [19]
transition on Exp to state [161]
transition on BREAK to state [17]
transition on STRING to state [16]
transition on RecordExp to state [15]
transition on ID to state [14]
transition on NIL to state [13]
transition on LPAREN to state [12]
transition on WhileExp to state [11]
transition on LetExp to state [10]
transition on IF to state [9]
transition on FieldVar to state [8]
transition on WHILE to state [7]
transition on Var to state [6]
transition on INT to state [5]
transition on SubscriptVar to state [4]
transition on ArrayExp to state [3]
transition on OpExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [161]: {
  [OpExp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [SubscriptVar ::= SubscriptVar LBRACK Exp (*) RBRACK , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
  [OpExp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [OpExp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [IfExp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [42]
transition on LT to state [41]
transition on TIMES to state [40]
transition on RBRACK to state [162]
transition on GT to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on NEQ to state [35]
transition on GE to state [33]
transition on DIVIDE to state [32]
transition on AND to state [31]
transition on MINUS to state [30]

-------------------
lalr_state [162]: {
  [SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK (*) , {EOF ID COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION TYPE }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 3 warnings
  45 terminals, 33 non terminals, and 82 productions declared, 
  producing 163 unique parse states.
  1 terminal declared but not used.
  0 non terminal declared but not used.
  0 productions never reduced.
  2 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
