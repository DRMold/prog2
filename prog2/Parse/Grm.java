
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Thu Feb 18 12:25:32 CST 2016
//----------------------------------------------------

package Parse;


public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 1},     {1, 1},     {1, 1}, 
        {1, 1},     {1, 1},     {1, 1},     {1, 1},     {1, 1}, 
        {1, 1},     {1, 1},     {1, 1},     {1, 1},     {1, 1}, 
        {1, 1},     {1, 1},     {2, 6},     {3, 3},     {7, 4}, 
        {8, 0},     {8, 2},     {9, 0},     {9, 3},     {15, 8}, 
        {11, 3},     {11, 3},     {11, 4},     {11, 6},     {10, 5}, 
        {13, 3},     {13, 3},     {13, 3},     {13, 3},     {13, 3}, 
        {13, 3},     {13, 3},     {13, 3},     {13, 3},     {13, 3}, 
        {13, 2},     {12, 4},     {16, 3},     {14, 4},     {4, 0}, 
        {4, 1},     {4, 1},     {5, 3},     {6, 1},     {6, 1}, 
        {17, 1},     {17, 1},     {17, 1},     {19, 3},     {18, 4}, 
        {18, 4},     {18, 4},     {27, 1},     {27, 2},     {20, 1}, 
        {20, 1},     {20, 1},     {23, 5},     {24, 9},     {25, 0}, 
        {25, 1},     {21, 5},     {22, 0},     {22, 1},     {26, 0}, 
        {26, 2},     {28, 1},     {28, 3},     {28, 3},     {29, 0}, 
        {29, 4},     {30, 0},     {30, 5},     {31, 0},     {31, 4}, 
        {32, 0},     {32, 5}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*1*/{0,-11,2,-11,5,-11,7,-11,9,-11,11,-11,13,-11,15,-11,16,-11,17,-11,18,-11,19,-11,20,-11,21,-11,22,-11,23,-11,24,-11,25,-11,26,-11,30,-11,31,-11,34,-11,35,-11,37,-11,38,-11,42,-11,44,-11,-1,0},
    /*2*/{0,-14,2,-14,5,-14,7,-14,9,-14,11,-14,13,-14,15,-14,16,-14,17,-14,18,-14,19,-14,20,-14,21,-14,22,-14,23,-14,24,-14,25,-14,26,-14,30,-14,31,-14,34,-14,35,-14,37,-14,38,-14,42,-14,44,-14,-1,0},
    /*3*/{0,-8,2,-8,5,-8,7,-8,9,-8,11,-8,13,-8,15,-8,16,-8,17,-8,18,-8,19,-8,20,-8,21,-8,22,-8,23,-8,24,-8,25,-8,26,-8,30,-8,31,-8,34,-8,35,-8,37,-8,38,-8,42,-8,44,-8,-1,0},
    /*4*/{0,-53,2,-53,5,-53,7,-53,9,-53,10,161,11,-53,13,-53,14,-53,15,-53,16,-53,17,-53,18,-53,19,-53,20,-53,21,-53,22,-53,23,-53,24,-53,25,-53,26,-53,27,-53,30,-53,31,-53,34,-53,35,-53,37,-53,38,-53,42,-53,44,-53,-1,0},
    /*5*/{0,-5,2,-5,5,-5,7,-5,9,-5,11,-5,13,-5,15,-5,16,-5,17,-5,18,-5,19,-5,20,-5,21,-5,22,-5,23,-5,24,-5,25,-5,26,-5,30,-5,31,-5,34,-5,35,-5,37,-5,38,-5,42,-5,44,-5,-1,0},
    /*6*/{0,-3,2,-3,5,-3,7,-3,9,-3,11,-3,13,-3,14,69,15,-3,16,-3,17,-3,18,-3,19,-3,20,-3,21,-3,22,-3,23,-3,24,-3,25,-3,26,-3,27,159,30,-3,31,-3,34,-3,35,-3,37,-3,38,-3,42,-3,44,-3,-1,0},
    /*7*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*8*/{0,-52,2,-52,5,-52,7,-52,9,-52,10,153,11,-52,13,-52,14,-52,15,-52,16,-52,17,-52,18,-52,19,-52,20,-52,21,-52,22,-52,23,-52,24,-52,25,-52,26,-52,27,-52,30,-52,31,-52,34,-52,35,-52,37,-52,38,-52,42,-52,44,-52,-1,0},
    /*9*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*10*/{0,-13,2,-13,5,-13,7,-13,9,-13,11,-13,13,-13,15,-13,16,-13,17,-13,18,-13,19,-13,20,-13,21,-13,22,-13,23,-13,24,-13,25,-13,26,-13,30,-13,31,-13,34,-13,35,-13,37,-13,38,-13,42,-13,44,-13,-1,0},
    /*11*/{0,-17,2,-17,5,-17,7,-17,9,-17,11,-17,13,-17,15,-17,16,-17,17,-17,18,-17,19,-17,20,-17,21,-17,22,-17,23,-17,24,-17,25,-17,26,-17,30,-17,31,-17,34,-17,35,-17,37,-17,38,-17,42,-17,44,-17,-1,0},
    /*12*/{1,22,2,15,3,17,4,6,8,13,9,-45,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*13*/{0,-6,2,-6,5,-6,7,-6,9,-6,11,-6,13,-6,15,-6,16,-6,17,-6,18,-6,19,-6,20,-6,21,-6,22,-6,23,-6,24,-6,25,-6,26,-6,30,-6,31,-6,34,-6,35,-6,37,-6,38,-6,42,-6,44,-6,-1,0},
    /*14*/{0,-51,2,-51,5,-51,7,-51,8,123,9,-51,10,122,11,-51,12,121,13,-51,14,-51,15,-51,16,-51,17,-51,18,-51,19,-51,20,-51,21,-51,22,-51,23,-51,24,-51,25,-51,26,-51,27,-51,30,-51,31,-51,34,-51,35,-51,37,-51,38,-51,42,-51,44,-51,-1,0},
    /*15*/{0,-15,2,-15,5,-15,7,-15,9,-15,11,-15,13,-15,15,-15,16,-15,17,-15,18,-15,19,-15,20,-15,21,-15,22,-15,23,-15,24,-15,25,-15,26,-15,30,-15,31,-15,34,-15,35,-15,37,-15,38,-15,42,-15,44,-15,-1,0},
    /*16*/{0,-4,2,-4,5,-4,7,-4,9,-4,11,-4,13,-4,15,-4,16,-4,17,-4,18,-4,19,-4,20,-4,21,-4,22,-4,23,-4,24,-4,25,-4,26,-4,30,-4,31,-4,34,-4,35,-4,37,-4,38,-4,42,-4,44,-4,-1,0},
    /*17*/{0,-7,2,-7,5,-7,7,-7,9,-7,11,-7,13,-7,15,-7,16,-7,17,-7,18,-7,19,-7,20,-7,21,-7,22,-7,23,-7,24,-7,25,-7,26,-7,30,-7,31,-7,34,-7,35,-7,37,-7,38,-7,42,-7,44,-7,-1,0},
    /*18*/{0,120,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*19*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*20*/{0,-9,2,-9,5,-9,7,-9,9,-9,11,-9,13,-9,15,-9,16,-9,17,-9,18,-9,19,-9,20,-9,21,-9,22,-9,23,-9,24,-9,25,-9,26,-9,30,-9,31,-9,34,-9,35,-9,37,-9,38,-9,42,-9,44,-9,-1,0},
    /*21*/{0,-2,2,-2,5,-2,7,-2,9,-2,11,-2,13,-2,15,-2,16,-2,17,-2,18,-2,19,-2,20,-2,21,-2,22,-2,23,-2,24,-2,25,-2,26,-2,30,-2,31,-2,34,-2,35,-2,37,-2,38,-2,42,-2,44,-2,-1,0},
    /*22*/{2,64,42,65,44,62,-1,0},
    /*23*/{0,-16,2,-16,5,-16,7,-16,9,-16,11,-16,13,-16,15,-16,16,-16,17,-16,18,-16,19,-16,20,-16,21,-16,22,-16,23,-16,24,-16,25,-16,26,-16,30,-16,31,-16,34,-16,35,-16,37,-16,38,-16,42,-16,44,-16,-1,0},
    /*24*/{0,-10,2,-10,5,-10,7,-10,9,-10,11,-10,13,-10,15,-10,16,-10,17,-10,18,-10,19,-10,20,-10,21,-10,22,-10,23,-10,24,-10,25,-10,26,-10,30,-10,31,-10,34,-10,35,-10,37,-10,38,-10,42,-10,44,-10,-1,0},
    /*25*/{0,-12,2,-12,5,-12,7,-12,9,-12,11,-12,13,-12,15,-12,16,-12,17,-12,18,-12,19,-12,20,-12,21,-12,22,-12,23,-12,24,-12,25,-12,26,-12,30,-12,31,-12,34,-12,35,-12,37,-12,38,-12,42,-12,44,-12,-1,0},
    /*26*/{2,28,-1,0},
    /*27*/{27,29,-1,0},
    /*28*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*29*/{15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,34,35,-1,0},
    /*30*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*31*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*32*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*33*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*34*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*35*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*36*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*37*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*38*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*39*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*40*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*41*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*42*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*43*/{0,-27,2,-27,5,-27,7,-27,9,-27,11,-27,13,-27,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,-27,30,-27,31,-27,34,-27,35,-27,37,-27,38,-27,42,-27,44,-27,-1,0},
    /*44*/{0,-39,2,-39,5,-39,7,-39,9,-39,11,-39,13,-39,15,37,16,31,17,41,18,33,25,-39,26,-39,30,-39,31,-39,34,-39,35,-39,37,-39,38,-39,42,-39,44,-39,-1,0},
    /*45*/{0,-33,2,-33,5,-33,7,-33,9,-33,11,-33,13,-33,15,-33,16,-33,17,-33,18,-33,19,-33,20,-33,21,-33,22,-33,23,-33,24,-33,25,-33,26,-33,30,-33,31,-33,34,-33,35,-33,37,-33,38,-33,42,-33,44,-33,-1,0},
    /*46*/{0,-37,2,-37,5,-37,7,-37,9,-37,11,-37,13,-37,15,37,16,31,17,41,18,33,25,-37,26,-37,30,-37,31,-37,34,-37,35,-37,37,-37,38,-37,42,-37,44,-37,-1,0},
    /*47*/{0,-40,2,-40,5,-40,7,-40,9,-40,11,-40,13,-40,15,37,16,31,17,41,18,33,25,-40,26,-40,30,-40,31,-40,34,-40,35,-40,37,-40,38,-40,42,-40,44,-40,-1,0},
    /*48*/{0,-35,2,-35,5,-35,7,-35,9,-35,11,-35,13,-35,15,37,16,31,17,41,18,33,25,-35,26,-35,30,-35,31,-35,34,-35,35,-35,37,-35,38,-35,42,-35,44,-35,-1,0},
    /*49*/{0,-31,2,-31,5,-31,7,-31,9,-31,11,-31,13,-31,15,-31,16,-31,17,41,18,33,19,-31,20,-31,21,-31,22,-31,23,-31,24,-31,25,-31,26,-31,30,-31,31,-31,34,-31,35,-31,37,-31,38,-31,42,-31,44,-31,-1,0},
    /*50*/{0,-36,2,-36,5,-36,7,-36,9,-36,11,-36,13,-36,15,37,16,31,17,41,18,33,25,-36,26,-36,30,-36,31,-36,34,-36,35,-36,37,-36,38,-36,42,-36,44,-36,-1,0},
    /*51*/{15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,35,53,-1,0},
    /*52*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*53*/{0,-25,2,-25,5,-25,7,-25,9,-25,11,-25,13,-25,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,-25,31,-25,34,-25,35,-25,37,-25,38,-25,42,-25,44,-25,-1,0},
    /*54*/{0,-38,2,-38,5,-38,7,-38,9,-38,11,-38,13,-38,15,37,16,31,17,41,18,33,25,-38,26,-38,30,-38,31,-38,34,-38,35,-38,37,-38,38,-38,42,-38,44,-38,-1,0},
    /*55*/{0,-34,2,-34,5,-34,7,-34,9,-34,11,-34,13,-34,15,-34,16,-34,17,-34,18,-34,19,-34,20,-34,21,-34,22,-34,23,-34,24,-34,25,-34,26,-34,30,-34,31,-34,34,-34,35,-34,37,-34,38,-34,42,-34,44,-34,-1,0},
    /*56*/{0,-26,2,-26,5,-26,7,-26,9,-26,11,-26,13,-26,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,-26,26,-26,30,-26,31,-26,34,-26,35,-26,37,-26,38,-26,42,-26,44,-26,-1,0},
    /*57*/{0,-32,2,-32,5,-32,7,-32,9,-32,11,-32,13,-32,15,-32,16,-32,17,41,18,33,19,-32,20,-32,21,-32,22,-32,23,-32,24,-32,25,-32,26,-32,30,-32,31,-32,34,-32,35,-32,37,-32,38,-32,42,-32,44,-32,-1,0},
    /*58*/{37,110,-1,0},
    /*59*/{2,64,37,-58,42,65,44,62,-1,0},
    /*60*/{2,-62,37,-62,42,-62,44,-62,-1,0},
    /*61*/{2,97,-1,0},
    /*62*/{2,-60,37,-60,42,-60,44,-60,-1,0},
    /*63*/{2,-51,10,94,14,-51,-1,0},
    /*64*/{2,76,-1,0},
    /*65*/{2,-61,37,-61,42,-61,44,-61,-1,0},
    /*66*/{2,68,14,69,-1,0},
    /*67*/{6,72,27,-70,-1,0},
    /*68*/{2,70,-1,0},
    /*69*/{0,-54,2,-54,5,-54,7,-54,9,-54,10,-54,11,-54,13,-54,14,-54,15,-54,16,-54,17,-54,18,-54,19,-54,20,-54,21,-54,22,-54,23,-54,24,-54,25,-54,26,-54,27,-54,30,-54,31,-54,34,-54,35,-54,37,-54,38,-54,42,-54,44,-54,-1,0},
    /*70*/{27,74,-1,0},
    /*71*/{2,73,-1,0},
    /*72*/{19,-71,27,-71,-1,0},
    /*73*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*74*/{2,-63,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,37,-63,42,-63,44,-63,-1,0},
    /*75*/{8,77,-1,0},
    /*76*/{2,78,9,-75,-1,0},
    /*77*/{6,86,-1,0},
    /*78*/{9,80,-1,0},
    /*79*/{6,72,19,-70,-1,0},
    /*80*/{19,82,-1,0},
    /*81*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*82*/{2,-65,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,37,-65,42,65,44,-65,-1,0},
    /*83*/{2,-66,37,-66,42,-66,44,-66,-1,0},
    /*84*/{2,-64,37,-64,42,-64,44,-64,-1,0},
    /*85*/{2,87,-1,0},
    /*86*/{5,88,9,-77,13,-77,-1,0},
    /*87*/{2,90,-1,0},
    /*88*/{9,-76,13,-76,-1,0},
    /*89*/{6,91,-1,0},
    /*90*/{2,92,-1,0},
    /*91*/{5,88,9,-77,13,-77,-1,0},
    /*92*/{9,-78,13,-78,-1,0},
    /*93*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*94*/{11,96,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*95*/{2,-55,10,-55,14,-55,-1,0},
    /*96*/{27,98,-1,0},
    /*97*/{2,99,12,100,28,102,-1,0},
    /*98*/{2,-72,37,-72,42,-72,44,-72,-1,0},
    /*99*/{2,78,13,-75,-1,0},
    /*100*/{2,-68,37,-68,42,-68,44,62,-1,0},
    /*101*/{39,103,-1,0},
    /*102*/{2,104,-1,0},
    /*103*/{2,-74,37,-74,42,-74,44,-74,-1,0},
    /*104*/{2,-67,37,-67,42,-67,44,-67,-1,0},
    /*105*/{2,-69,37,-69,42,-69,44,-69,-1,0},
    /*106*/{13,108,-1,0},
    /*107*/{2,-73,37,-73,42,-73,44,-73,-1,0},
    /*108*/{37,-59,-1,0},
    /*109*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,38,-45,40,18,41,14,-1,0},
    /*110*/{9,-47,38,-47,-1,0},
    /*111*/{7,115,9,-46,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,38,-46,-1,0},
    /*112*/{38,114,-1,0},
    /*113*/{0,-30,2,-30,5,-30,7,-30,9,-30,11,-30,13,-30,15,-30,16,-30,17,-30,18,-30,19,-30,20,-30,21,-30,22,-30,23,-30,24,-30,25,-30,26,-30,30,-30,31,-30,34,-30,35,-30,37,-30,38,-30,42,-30,44,-30,-1,0},
    /*114*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*115*/{9,-50,38,-50,-1,0},
    /*116*/{9,-48,38,-48,-1,0},
    /*117*/{7,115,9,-49,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,38,-49,-1,0},
    /*118*/{0,-41,2,-41,5,-41,7,-41,9,-41,11,-41,13,-41,15,-41,16,-41,17,41,18,33,19,-41,20,-41,21,-41,22,-41,23,-41,24,-41,25,-41,26,-41,30,-41,31,-41,34,-41,35,-41,37,-41,38,-41,42,-41,44,-41,-1,0},
    /*119*/{0,-1,-1,0},
    /*120*/{2,135,13,-79,-1,0},
    /*121*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*122*/{1,22,2,15,3,17,4,6,8,13,9,-21,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*123*/{5,127,9,-23,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*124*/{9,126,-1,0},
    /*125*/{0,-20,2,-20,5,-20,7,-20,9,-20,11,-20,13,-20,15,-20,16,-20,17,-20,18,-20,19,-20,20,-20,21,-20,22,-20,23,-20,24,-20,25,-20,26,-20,30,-20,31,-20,34,-20,35,-20,37,-20,38,-20,42,-20,44,-20,-1,0},
    /*126*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*127*/{9,-22,-1,0},
    /*128*/{5,127,9,-23,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*129*/{9,-24,-1,0},
    /*130*/{11,132,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*131*/{0,-55,2,-55,5,-55,7,-55,9,-55,10,-55,11,-55,13,-55,14,-55,15,-55,16,-55,17,-55,18,-55,19,-55,20,-55,21,-55,22,-55,23,-55,24,-55,25,-55,26,-55,27,-55,30,-55,31,-55,34,-55,35,-55,37,-55,38,-55,39,133,42,-55,44,-55,-1,0},
    /*132*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*133*/{0,-18,2,-18,5,-18,7,-18,9,-18,11,-18,13,-18,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,-18,31,-18,34,-18,35,-18,37,-18,38,-18,42,-18,44,-18,-1,0},
    /*134*/{19,138,-1,0},
    /*135*/{13,137,-1,0},
    /*136*/{0,-42,2,-42,5,-42,7,-42,9,-42,11,-42,13,-42,15,-42,16,-42,17,-42,18,-42,19,-42,20,-42,21,-42,22,-42,23,-42,24,-42,25,-42,26,-42,30,-42,31,-42,34,-42,35,-42,37,-42,38,-42,42,-42,44,-42,-1,0},
    /*137*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*138*/{5,141,13,-81,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*139*/{13,-80,-1,0},
    /*140*/{2,142,-1,0},
    /*141*/{19,143,-1,0},
    /*142*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*143*/{5,141,13,-81,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*144*/{13,-82,-1,0},
    /*145*/{9,147,-1,0},
    /*146*/{0,-43,2,-43,5,-43,7,-43,9,-43,11,-43,13,-43,15,-43,16,-43,17,-43,18,-43,19,-43,20,-43,21,-43,22,-43,23,-43,24,-43,25,-43,26,-43,30,-43,31,-43,34,-43,35,-43,37,-43,38,-43,42,-43,44,-43,-1,0},
    /*147*/{15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,149,-1,0},
    /*148*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*149*/{0,-28,2,-28,5,-28,7,-28,9,-28,11,-28,13,-28,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,-28,31,151,34,-28,35,-28,37,-28,38,-28,42,-28,44,-28,-1,0},
    /*150*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*151*/{0,-29,2,-29,5,-29,7,-29,9,-29,11,-29,13,-29,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,-29,31,-29,34,-29,35,-29,37,-29,38,-29,42,-29,44,-29,-1,0},
    /*152*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*153*/{11,155,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*154*/{0,-56,2,-56,5,-56,7,-56,9,-56,10,-56,11,-56,13,-56,14,-56,15,-56,16,-56,17,-56,18,-56,19,-56,20,-56,21,-56,22,-56,23,-56,24,-56,25,-56,26,-56,27,-56,30,-56,31,-56,34,-56,35,-56,37,-56,38,-56,42,-56,44,-56,-1,0},
    /*155*/{15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,35,157,-1,0},
    /*156*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*157*/{0,-44,2,-44,5,-44,7,-44,9,-44,11,-44,13,-44,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,-44,31,-44,34,-44,35,-44,37,-44,38,-44,42,-44,44,-44,-1,0},
    /*158*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*159*/{0,-19,2,-19,5,-19,7,-19,9,-19,11,-19,13,-19,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,30,-19,31,-19,34,-19,35,-19,37,-19,38,-19,42,-19,44,-19,-1,0},
    /*160*/{1,22,2,15,3,17,4,6,8,13,16,20,29,10,32,8,33,27,36,23,40,18,41,14,-1,0},
    /*161*/{11,163,15,37,16,31,17,41,18,33,19,38,20,36,21,42,22,39,23,40,24,34,25,32,26,43,-1,0},
    /*162*/{0,-57,2,-57,5,-57,7,-57,9,-57,10,-57,11,-57,13,-57,14,-57,15,-57,16,-57,17,-57,18,-57,19,-57,20,-57,21,-57,22,-57,23,-57,24,-57,25,-57,26,-57,27,-57,30,-57,31,-57,34,-57,35,-57,37,-57,38,-57,42,-57,44,-57,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,18,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*1*/{-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{1,155,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*8*/{-1,-1},
    /*9*/{1,147,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{1,111,2,3,3,20,4,145,5,110,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{1,118,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{17,66,18,4,19,8,20,59,21,65,23,62,24,60,27,58,-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{1,29,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*29*/{-1,-1},
    /*30*/{1,57,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*31*/{1,56,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*32*/{1,55,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*33*/{1,54,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*34*/{1,51,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*35*/{1,50,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*36*/{1,49,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*37*/{1,48,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*38*/{1,47,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*39*/{1,46,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*40*/{1,45,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*41*/{1,44,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*42*/{1,43,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{1,53,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{17,66,18,4,19,8,20,59,21,65,23,62,24,60,27,108,-1,-1},
    /*60*/{-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{26,70,-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{1,74,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{29,78,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{26,80,-1,-1},
    /*80*/{-1,-1},
    /*81*/{1,82,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*82*/{24,83,25,84,-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{30,88,-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{30,92,-1,-1},
    /*92*/{-1,-1},
    /*93*/{1,94,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{28,100,-1,-1},
    /*98*/{-1,-1},
    /*99*/{29,106,-1,-1},
    /*100*/{21,105,22,104,-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{1,111,2,3,3,20,4,112,5,110,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{1,117,2,3,3,20,5,115,6,116,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{31,135,-1,-1},
    /*121*/{1,130,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*122*/{1,123,2,3,3,20,7,24,8,124,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*123*/{9,127,-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{1,128,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*127*/{-1,-1},
    /*128*/{9,129,-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{-1,-1},
    /*132*/{1,133,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{1,138,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*138*/{32,139,-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{1,143,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*143*/{32,144,-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{1,149,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*149*/{-1,-1},
    /*150*/{1,151,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*151*/{-1,-1},
    /*152*/{1,153,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{1,157,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*157*/{-1,-1},
    /*158*/{1,159,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*159*/{-1,-1},
    /*160*/{1,161,2,3,3,20,7,24,10,10,11,25,12,15,13,2,14,11,15,1,16,23,17,6,18,4,19,8,-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NxtFieldExpList ::= COMMA ID EQ Exp NxtFieldExpList 
            {
              Absyn.FieldExpList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nxtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nxtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList nxt = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(cleft, sym(n), e, nxt); 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*NxtFieldExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NxtFieldExpList ::= 
            {
              Absyn.FieldExpList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*NxtFieldExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FieldExpList ::= ID EQ Exp NxtFieldExpList 
            {
              Absyn.FieldExpList RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nxtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nxtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList nxt = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(nleft, sym(n), e, nxt); 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*FieldExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FieldExpList ::= 
            {
              Absyn.FieldExpList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*FieldExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NxtFieldList ::= COMMA ID COLON ID NxtFieldList 
            {
              Absyn.FieldList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nxtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nxtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList nxt = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(cleft, sym(n1), sym(n2), nxt); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*NxtFieldList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NxtFieldList ::= 
            {
              Absyn.FieldList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*NxtFieldList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FieldList ::= ID COLON ID NxtFieldList 
            {
              Absyn.FieldList RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nxtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nxtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList nxt = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(n1left, sym(n1), sym(n2), nxt); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*FieldList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FieldList ::= 
            {
              Absyn.FieldList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*FieldList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Ty ::= ARRAY OF ID 
            {
              Absyn.Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayTy(aleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*Ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Ty ::= LBRACE FieldList RBRACE 
            {
              Absyn.Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList f = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordTy(lleft, f); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*Ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Ty ::= ID 
            {
              Absyn.Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*Ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DecTypeId ::= COLON ID 
            {
              Absyn.NameTy RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(cleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*DecTypeId*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DecTypeId ::= 
            {
              Absyn.NameTy RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*DecTypeId*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NxtTypeDec ::= TypeDec 
            {
              Absyn.TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = t; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*NxtTypeDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NxtTypeDec ::= 
            {
              Absyn.TypeDec RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*NxtTypeDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TypeDec ::= TYPE ID ASSIGN Ty NxtTypeDec 
            {
              Absyn.TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Ty v = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nxtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nxtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec nxt = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(tleft, sym(n), v, nxt); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*TypeDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NxtFunctionDec ::= FunctionDec 
            {
              Absyn.FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*NxtFunctionDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NxtFunctionDec ::= 
            {
              Absyn.FunctionDec RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*NxtFunctionDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN DecTypeId EQ Exp NxtFunctionDec 
            {
              Absyn.FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.FieldList fl = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nxtleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nxtright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec nxt = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(fleft, sym(n), fl, t, e, nxt); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*FunctionDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VarDec ::= Var ID DecTypeId ASSIGN Exp 
            {
              Absyn.VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy t = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(vleft, sym(n), t, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*VarDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Dec ::= FunctionDec 
            {
              Absyn.Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Dec ::= TypeDec 
            {
              Absyn.Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = t; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Dec ::= VarDec 
            {
              Absyn.Dec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.VarDec v = (Absyn.VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = v; 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*Dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DecList ::= Dec DecList 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.DecList l = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, l); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*DecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DecList ::= Dec 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*DecList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.SubscriptVar s = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lleft, s, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*SubscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SubscriptVar ::= FieldVar LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.FieldVar f = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lleft, f, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*SubscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SubscriptVar ::= ID LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lleft, new Absyn.SimpleVar(nleft, sym(n)), e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*SubscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldVar ::= Var DOT ID 
            {
              Absyn.FieldVar RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(dleft, v, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*FieldVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Var ::= SubscriptVar 
            {
              Absyn.Var RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SubscriptVar s = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Var ::= FieldVar 
            {
              Absyn.Var RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldVar f = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NxtSequence ::= Sequence 
            {
              Absyn.ExpList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList s = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*NxtSequence*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NxtSequence ::= Exp 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*NxtSequence*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Sequence ::= Exp SEMICOLON NxtSequence 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList s = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*Sequence*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpList ::= Sequence 
            {
              Absyn.ExpList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList s = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpList ::= Exp 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpList ::= 
            {
              Absyn.ExpList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WhileExp ::= WHILE Exp DO Exp 
            {
              Absyn.WhileExp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(wleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*WhileExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SeqExp ::= LPAREN ExpList RPAREN 
            {
              Absyn.SeqExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList ls = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SeqExp(lleft, ls); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*SeqExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RecordExp ::= ID LBRACE FieldExpList RBRACE 
            {
              Absyn.RecordExp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList l = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordExp(nleft, sym(n), l); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*RecordExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OpExp ::= MINUS Exp 
            {
              Absyn.OpExp RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(mleft, new Absyn.IntExp(mleft, 0), Absyn.OpExp.MINUS, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OpExp ::= Exp LE Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OpExp ::= Exp LT Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OpExp ::= Exp GE Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OpExp ::= Exp GT Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OpExp ::= Exp NEQ Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OpExp ::= Exp EQ Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpExp ::= Exp DIVIDE Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OpExp ::= Exp TIMES Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OpExp ::= Exp MINUS Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OpExp ::= Exp PLUS Exp 
            {
              Absyn.OpExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*OpExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LetExp ::= LET DecList IN ExpList END 
            {
              Absyn.LetExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.DecList d = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList e = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(lleft, d, new Absyn.SeqExp(eleft, e)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*LetExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IfExp ::= IF Exp THEN Exp ELSE Exp 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, e1, e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*IfExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IfExp ::= IF Exp THEN Exp 
            {
              Absyn.IfExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*IfExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfExp ::= Exp OR Exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, new Absyn.IntExp(e1left, 1), e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*IfExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfExp ::= Exp AND Exp 
            {
              Absyn.IfExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(e1left, e1, e2, new Absyn.IntExp(e1left, 0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*IfExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ForExp ::= FOR ID ASSIGN Exp TO Exp DO Exp 
            {
              Absyn.ForExp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(nleft, sym(n), null, e1), e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*ForExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NxtFunctionArgList ::= COMMA Exp NxtFunctionArgList 
            {
              Absyn.ExpList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList l = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, l); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*NxtFunctionArgList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NxtFunctionArgList ::= 
            {
              Absyn.ExpList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*NxtFunctionArgList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionArgList ::= Exp NxtFunctionArgList 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList l = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, l); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*FunctionArgList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionArgList ::= 
            {
              Absyn.ExpList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*FunctionArgList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CallExp ::= ID LPAREN FunctionArgList RPAREN 
            {
              Absyn.CallExp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList l = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(nleft, sym(n), l); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*CallExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AssignExp ::= Var ASSIGN Exp 
            {
              Absyn.AssignExp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(vleft, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*AssignExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ArrayExp ::= ID LBRACK Exp RBRACK OF Exp 
            {
              Absyn.ArrayExp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT =new Absyn.ArrayExp(nleft, sym(n), e1,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*ArrayExp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp ::= WhileExp 
            {
              Absyn.Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.WhileExp w = (Absyn.WhileExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = w; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp ::= SeqExp 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SeqExp s = (Absyn.SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = s; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp ::= RecordExp 
            {
              Absyn.Exp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.RecordExp r = (Absyn.RecordExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = r; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= OpExp 
            {
              Absyn.Exp RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.OpExp o = (Absyn.OpExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = o; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= LetExp 
            {
              Absyn.Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.LetExp l = (Absyn.LetExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = l; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= IfExp 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IfExp i = (Absyn.IfExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = i; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= ForExp 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ForExp f = (Absyn.ForExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= CallExp 
            {
              Absyn.Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CallExp c = (Absyn.CallExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = c; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp ::= AssignExp 
            {
              Absyn.Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.AssignExp a = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = a; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp ::= ArrayExp 
            {
              Absyn.Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ArrayExp a = (Absyn.ArrayExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT  = a; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp ::= BREAK 
            {
              Absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp ::= NIL 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NilExp(nleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp ::= INT 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(ileft, i); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= STRING 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(sleft, s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Exp ::= Var 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Exp ::= error 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Exp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

