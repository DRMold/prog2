package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

/* Terminal Symbols / Scanner Tokens */
terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

/* Non-terminal Symbols */
non terminal Absyn.Exp          Exp;
non terminal Absyn.ArrayExp     ArrayExp;
non terminal Absyn.AssignExp    AssignExp;

non terminal Absyn.ExpList      ExpList;

non terminal Absyn.CallExp      CallExp;

non terminal Absyn.LetExp       LetExp;
non terminal Absyn.IfExp        IfExp;
non terminal Absyn.RecordExp    RecordExp;
non terminal Absyn.OpExp        OpExp;
non terminal Absyn.WhilExp      WhileExp;
non terminal Absyn.ForExp       ForExp;
non terminal Absyn.SeqExp       SeqExp;

non terminal Absyn.IntExp       IntExp;
non terminal Absyn.StringExp    StringExp;
non terminal Absyn.VarExp       VarExp;
non terminal Absyn.NilExp       NilExp;
non terminal Absyn.BreakExp     BreakExp;


non terminal Absyn.Var          Var;
non terminal Absyn.SubscriptVar SubscriptVar;
non terminal Absyn.FieldVar     FieldVar;
non terminal Absyn.SimplVar     SimpleVar;

non terminal Absyn.Dec          Dec;
non terminal Absyn.TypeDec      TypeDec;
non terminal Absyn.VarDec       VarDec;
non terminal Absyn.FunctionDec  FunctionDec;

non terminal Absyn.DecList      DecList;

non terminal Absyn.Ty           Ty;
non terminal Absyn.RecordTy     RecordTy;
non terminal Absyn.ArrayTy      ArrayTy;
non terminal Absyn.NameTy       NameTy;

non terminal Absyn.FieldList FieldList;

non terminal Absyn.FieldExpList FieldExpList;

/* Precedence Rules */
precedence nonassoc EQ, NQ, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

/* Grammar */
start with Exp;

/* Expressions */
Exp ::= error:e
	  {: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v
	  {: RESULT = new Absyn.VarExp(vleft, v); :}
        | STRING:s
          {: RESULT = new Absyn.StringExp(sleft, s); :}
        | INT:i
          {: RESULT = new Absyn.IntExp(ileft, i); :}
        | NIL:n
          {: RESULT = new Absyn.NilExp(nleft); :}
        | BREAK:b
          {: RESULT = new Absyn.BreakExp(bleft); :}
        | ArrayExp:a
          {: RESULT  = a; :}
        | AssignExp:a
          {: RESULT  = a; :}
        | CallExp:c
          {: RESULT  = c; :}
        | ForExp:f
          {: RESULT  = f; :}
        | IfExp:i
          {: RESULT  = i; :}
        | LetExp:l
          {: RESULT  = l; :}
        | OpExp:o
          {: RESULT  = o; :}
        | RecordExp:r
          {: RESULT  = r; :}
        | SeqExp:s
          {: RESULT  = s; :}
        | WhileExp:w
          {: RESULT  = w; :}
;

ArrayExp ::=
;

AssignExp ::= Var:v ASSIGN Exp:e
           {: RESULT = new Absyn.AssignExp(vleft, v, e); :}
;

CallExp ::= 
;

ForExp ::= FOR:f ID:n ASSIGN Exp:e1 TO Exp:e2 DO Exp:e3
           {: RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(nleft, sym(n), null, e1), e2, e3); :}
;

IfExp ::=   

LetExp ::= LET:l DecList:d IN ExpList:e END
           {: RESULT = new Absyn.LetExp(lleft, d, new Absyn.SeqExp(eleft, e)); :}
;

OpExp ::= Exp:e1 PLUS Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.PLUS, e2); :}
        | Exp:e1 MINUS Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MINUS, e2); :}
        | Exp:e1 TIMES Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.MUL, e2); :}
        | Exp:e1 DIVIDE Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.DIV, e2); :}
        | Exp:e1 EQ Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.EQ, e2); :}
        | Exp:e1 NEQ Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.NE, e2); :}
        | Exp:e1 GT Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GT, e2); :}
        | Exp:e1 GE Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.GE, e2); :}
        | Exp:e1 LT Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LT, e2); :}
        | Exp:e1 LE Exp:e2
           {: RESULT = new Absyn.OpExp(e1left, e1, Absyn.OpExp.LE, e2); :}
        | MINUS:m Exp:e
           {: RESULT = new Absyn.OpExp(mleft, new Absyn.IntExp(mleft, 0), Absyn.OpExp.MINUS, e); :}
;

RecordExp ::= ID:n LBRACE FieldExpList:l RBRACE
           {: RESULT = new Absyn.RecordExp(nleft, sym(n), l); :}
;

SeqExp ::= LPAREN:l ExpList:ls RPAREN
           {: RSULT = new Absyn.SeqExp(lleft, ls); :}
;

WhileExp ::= WHILE:w Exp:e1 DO Exp:e2
           {: RESULT = new Absyn.WhileExp(wleft, e1, e2); :}
;

ExpList ::= 
           {: RESULT = null; :}
        | Exp: e
           {: RESULT = new Absyn.ExpList(e, null); :}
        | /* Need Sequence */
;

/* Variables */
Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
        | FieldVar:f
          {: RESULT = f; :}
        | SubscriptVar:s
          {: RESULT = s :}
;

FieldVar ::= Var:v DOT:d ID:n 
          {: RESULT = new Absyn.FieldVar(dleft, v, sym(n)); :}
;

SubscriptVar ::= ID:n LBRACK:l Exp:e RBRACK
          {: RESULT = new Absyn.SubscriptVar(lleft, new Absyn.SimpleVar(nleft, sym(n)), e); :}
        | FieldVar:f LBRACK:l Exp:e RBRACK
          {: RESULT = new Absyn.SubscriptVar(lleft, f, e); :}
        | SubcriptVar:s LBRACK:l Exp:e RBRACK
          {: RESULT = new Absyn.SubscriptVar(lleft, s, e); :}
;

/* Declarations */
DecList ::=

Dec ::=

VarDec ::=

FunctionDec ::=

TypeDec ::=

DecTypeId ::=

/* Types */
Ty ::= ID:n
           {: RESULT = new Absyn.NameTy(nleft, sym(n)); :}
        | LBRACE:l FieldList:f RBRACE
           {: RESULT = new Absyn.RecordTy(lleft, f); :}
        | ARRAY:a OF ID:n
           {: RESULT = new Absyn.ArrayTy(aleft, sym(n)); :}
;

/* Fields */
FieldList ::=

FieldExpList ::=

